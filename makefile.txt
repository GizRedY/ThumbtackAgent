# Thumbtack Automation Bot Makefile

.PHONY: help setup install test run clean docker-build docker-run docker-stop logs

# Default target
help:
	@echo "Thumbtack Automation Bot - Available commands:"
	@echo ""
	@echo "Setup & Installation:"
	@echo "  setup          - Initial setup (create venv, install deps, create configs)"
	@echo "  install        - Install Python dependencies"
	@echo "  test           - Run all tests"
	@echo ""
	@echo "Running:"
	@echo "  run            - Run bot once"
	@echo "  daemon         - Run bot in daemon mode"
	@echo ""
	@echo "Docker:"
	@echo "  docker-build   - Build Docker image"
	@echo "  docker-run     - Run with Docker Compose"
	@echo "  docker-stop    - Stop Docker containers"
	@echo "  logs           - Show Docker logs"
	@echo ""
	@echo "Development:"
	@echo "  clean          - Clean temporary files"
	@echo "  lint           - Run code linting"
	@echo "  format         - Format code with black"

# Setup and installation
setup:
	@echo "🚀 Setting up Thumbtack Automation Bot..."
	chmod +x setup.sh
	./setup.sh

install:
	@echo "📦 Installing dependencies..."
	pip install -r requirements.txt

# Testing
test:
	@echo "🧪 Running tests..."
	python test.py

# Running the application
run:
	@echo "▶️ Running bot once..."
	python main.py --once

daemon:
	@echo "🔄 Starting bot daemon..."
	python main.py --daemon

# Docker operations
docker-build:
	@echo "🐳 Building Docker image..."
	docker build -t thumbtack-bot .

docker-run:
	@echo "🚀 Starting with Docker Compose..."
	docker-compose up -d

docker-stop:
	@echo "⏹️ Stopping Docker containers..."
	docker-compose down

logs:
	@echo "📋 Showing logs..."
	docker-compose logs -f

# Development
clean:
	@echo "🧹 Cleaning temporary files..."
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -name "*.pyc" -delete
	find . -name "*.pyo" -delete
	find . -name "*.pyd" -delete
	find . -name ".coverage" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	rm -rf build/ dist/ .pytest_cache/ .coverage htmlcov/

lint:
	@echo "🔍 Running linting..."
	@command -v flake8 >/dev/null 2>&1 && flake8 . --max-line-length=100 --ignore=E203,W503 || echo "flake8 not installed, skipping..."
	@command -v pylint >/dev/null 2>&1 && pylint *.py || echo "pylint not installed, skipping..."

format:
	@echo "🎨 Formatting code..."
	@command -v black >/dev/null 2>&1 && black . || echo "black not installed, skipping..."
	@command -v isort >/dev/null 2>&1 && isort . || echo "isort not installed, skipping..."

# Development dependencies
dev-install:
	@echo "📚 Installing development dependencies..."
	pip install black flake8 pylint isort pytest

# Quick start (setup + test + run)
quick-start: setup test run

# Production deployment
deploy: clean test docker-build docker-run
	@echo "✅ Deployment completed"

# Monitor application
monitor:
	@echo "📊 Monitoring application..."
	@if [ -f "logs/thumbtack_bot.log" ]; then \
		tail -f logs/thumbtack_bot.log; \
	else \
		echo "Log file not found. Make sure the application is running."; \
	fi

# Check status
status:
	@echo "📈 Application Status:"
	@if docker-compose ps | grep -q "thumbtack-bot"; then \
		echo "✅ Docker container is running"; \
		docker-compose ps; \
	else \
		echo "❌ Docker container is not running"; \
	fi
	@if [ -f "mock_leads.json" ]; then \
		echo "📋 Mock leads file exists"; \
	fi
	@if [ -f "logs/thumbtack_bot.log" ]; then \
		echo "📝 Log file exists"; \
		echo "Last 3 log entries:"; \
		tail -n 3 logs/thumbtack_bot.log; \
	fi

# Backup configuration
backup:
	@echo "💾 Creating configuration backup..."
	@mkdir -p backups
	@tar -czf backups/config-backup-$(shell date +%Y%m%d-%H%M%S).tar.gz \
		.env* credentials.json token.pickle mock_*.json 2>/dev/null || true
	@echo "Backup created in backups/ directory"

# Health check
health-check:
	@echo "🏥 Performing health check..."
	@python -c "import config; print('✅ Config loaded')" 2>/dev/null || echo "❌ Config error"
	@python -c "import openai; print('✅ OpenAI library available')" 2>/dev/null || echo "❌ OpenAI library missing"
	@python -c "from google.oauth2.credentials import Credentials; print('✅ Google API library available')" 2>/dev/null || echo "❌ Google API library missing"
	@if [ -f "credentials.json" ]; then echo "✅ Google credentials file found"; else echo "❌ Google credentials file missing"; fi
	@if [ -f ".env" ]; then echo "✅ Environment file found"; else echo "❌ Environment file missing"; fi