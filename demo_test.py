#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
"""

import sys
import os
from datetime import datetime, timedelta
from loguru import logger

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import config
from models import Lead, Message, MessageType
from thumbtack_client import ThumbtackClient
from gpt_client import GPTClient
from calendar_client import CalendarClient


def print_separator(title=""):
    print("\n" + "=" * 60)
    if title:
        print(f" {title} ".center(60, "="))
        print("=" * 60)


def demo_ai_responses():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("ü§ñ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ö–∞–∫ –ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏—é ChatGPT –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤\n")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    thumbtack = ThumbtackClient()
    gpt = GPTClient()
    calendar_client = CalendarClient()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
    if not thumbtack.authenticate():
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Thumbtack")
        return

    if not gpt.is_available():
        print("‚ùå –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    if not calendar_client.authenticate():
        print("‚ö†Ô∏è –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ")
        calendar_client = None

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    leads = thumbtack.get_new_leads()
    messages = thumbtack.get_new_messages()

    if len(leads) < 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(leads)} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π\n")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    for i, lead in enumerate(leads[:2], 1):
        print_separator(f"–ö–õ–ò–ï–ù–¢ {i}: {lead.customer_name}")

        print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:")
        print(f"   –ò–º—è: {lead.customer_name}")
        print(f"   Email: {lead.customer_email}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: '{lead.description}'")  # –≠—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        print(f"   –ë—é–¥–∂–µ—Ç: ${lead.budget_range[0]}-${lead.budget_range[1]}")
        print(f"   –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞: {lead.preferred_date}")

        # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        client_message = None
        for msg in messages:
            if msg.lead_id == lead.id:
                client_message = msg
                break

        if client_message:
            print(f"\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:")
            print(f"   '{client_message.content}'")
            print(f"   (–î–ª–∏–Ω–∞: {len(client_message.content)} —Å–∏–º–≤–æ–ª–æ–≤)")

        # –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–∏–¥
        print(f"\nüß† –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞...")
        analysis = gpt.analyze_lead(lead)

        print(f"   üéØ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {analysis.sentiment}")
        print(f"   üéØ –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {analysis.intent}")
        print(f"   üéØ –°—Ä–æ—á–Ω–æ—Å—Ç—å: {analysis.urgency}")
        print(f"   üí∞ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞: ${analysis.suggested_price or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
        print(
            f"   üîë –ö–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: {', '.join(analysis.key_requirements) if analysis.key_requirements else '–ù–µ—Ç'}")
        print(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò: {analysis.confidence_score:.1%}")

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –µ–≥–æ
        if client_message:
            print(f"\nüß† –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            msg_analysis = gpt.analyze_message(client_message, lead)
            print(f"   üìù –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_analysis.intent}")
            print(f"   üìù –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {msg_analysis.sentiment}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        suggested_price = analysis.suggested_price or config.base_price
        print(f"\n‚úçÔ∏è –ò–ò –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç...")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        additional_context = ""
        if client_message:
            additional_context = f"Customer message: '{client_message.content}'"

        ai_response = gpt.generate_quote_response(
            lead,
            suggested_price,
            additional_context
        )

        print(f"\nüì® –û–¢–í–ï–¢ –û–¢ –ò–ò –ö–õ–ò–ï–ù–¢–£:")
        print("-" * 50)
        print(ai_response)
        print("-" * 50)
        print(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        if calendar_client and lead.preferred_date:
            print(f"\nüìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ...")

            try:
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É
                if isinstance(lead.preferred_date, str):
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –ø—Ä–∏—à–ª–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –∏–∑ JSON
                    preferred = datetime.fromisoformat(lead.preferred_date.replace('Z', ''))
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ datetime –æ–±—ä–µ–∫—Ç
                    preferred = lead.preferred_date

                available_slots = calendar_client.get_available_slots(preferred, duration_hours=2.0)

                if available_slots:
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(available_slots)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
                    print("   üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
                    for j, slot in enumerate(available_slots[:3], 1):
                        print(f"      {j}. {slot.strftime('%A, %B %d at %I:%M %p')}")
                else:
                    print("   ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
                try:
                    tomorrow = datetime.now().replace(hour=10, minute=0, second=0, microsecond=0) + timedelta(days=1)
                    available_slots = calendar_client.get_available_slots(tomorrow, duration_hours=2.0)
                    if available_slots:
                        print(f"   üìÖ –ù–æ –≤–æ—Ç —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –∑–∞–≤—Ç—Ä–∞:")
                        for j, slot in enumerate(available_slots[:2], 1):
                            print(f"      {j}. {slot.strftime('%A, %B %d at %I:%M %p')}")
                except:
                    print("   üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞
        print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É...")
        success = thumbtack.send_message(lead.id, ai_response)
        if success:
            print("   ‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")

        if i < len(leads):
            input(f"\n‚è∏Ô∏è  –ù–∞–∂–º–∏ ENTER —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É...")

    print_separator("–ò–¢–û–ì–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
    print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –ß—Ç–æ –º—ã —É–≤–∏–¥–µ–ª–∏:")
    print("   ‚Ä¢ –ò–ò –ø–æ–Ω–∏–º–∞–µ—Ç –¥–∞–∂–µ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è")
    print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç—å")
    print("   ‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
    print("   ‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–∞–∑—É–º–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    print("   ‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ")
    print("\nüöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏!")


def quick_analysis_demo():
    """–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("‚ö° –ë–´–°–¢–†–´–ô –¢–ï–°–¢: –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

    gpt = GPTClient()

    if not gpt.is_available():
        print("‚ùå –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    test_cases = [
        ("Outlet issue", "Electrical"),
        ("Fan installation", "Installation"),
        ("Leaky faucet", "Plumbing"),
        ("TV mount", "Installation"),
        ("Light switch broken", "Electrical")
    ]

    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑...")

    for description, category in test_cases:
        # –°–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–¥
        test_lead = Lead(
            id=f"test_{description.replace(' ', '_')}",
            customer_name="Test Customer",
            customer_email="test@example.com",
            service_category=category,
            description=description,
            budget_range=(50, 200)
        )

        print(f"\nüìù –§—Ä–∞–∑–∞: '{description}'")
        analysis = gpt.analyze_lead(test_lead)
        print(f"   üéØ –ü–æ–Ω—è–ª –∫–∞–∫: {analysis.intent}")
        print(f"   üí∞ –¶–µ–Ω–∞: ${analysis.suggested_price or config.base_price}")
        print(f"   üîë –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {', '.join(analysis.key_requirements[:2]) if analysis.key_requirements else '–ù–µ—Ç'}")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--quick', action='store_true', help='–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç')
    parser.add_argument('--full', action='store_true', help='–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è')
    args = parser.parse_args()

    if args.quick:
        quick_analysis_demo()
    elif args.full:
        demo_ai_responses()
    else:
        print("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:")
        print("  python demo_test.py --quick   # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç")
        print("  python demo_test.py --full    # –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
        print()
        choice = input("–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è? (y/n): ").lower()
        if choice in ['y', 'yes', '–¥–∞', '']:
            demo_ai_responses()
        else:
            quick_analysis_demo()