#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Thumbtack Bot
"""

import sys
import os
from datetime import datetime, timedelta
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import config
from models import Lead, Message, CalendarEvent, LeadStatus, MessageType
from thumbtack_client import ThumbtackClient
from gpt_client import GPTClient
from calendar_client import CalendarClient


def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß Testing configuration...")

    try:
        print(f"  ‚úÖ Business Name: {config.business_name}")
        print(f"  ‚úÖ Service Type: {config.service_type}")
        print(f"  ‚úÖ Base Price: ${config.base_price}")
        print(f"  ‚úÖ Check Interval: {config.check_interval_minutes} minutes")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞
        if config.openai_api_key and len(config.openai_api_key) > 10:
            print(f"  ‚úÖ OpenAI API Key: {'*' * 10}...{config.openai_api_key[-4:]}")
        else:
            print("  ‚ùå OpenAI API Key not configured")
            return False

        return True
    except Exception as e:
        print(f"  ‚ùå Configuration error: {e}")
        return False


def test_thumbtack_client():
    """–¢–µ—Å—Ç Thumbtack –∫–ª–∏–µ–Ω—Ç–∞"""
    print("\nüìû Testing Thumbtack Client...")

    try:
        client = ThumbtackClient()

        # –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if client.authenticate():
            print("  ‚úÖ Authentication successful")
        else:
            print("  ‚ùå Authentication failed")
            return False

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤
        leads = client.get_new_leads()
        print(f"  ‚úÖ Found {len(leads)} leads")

        if leads:
            lead = leads[0]
            print(f"    - Sample lead: {lead.customer_name} ({lead.service_category})")

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = client.get_new_messages()
        print(f"  ‚úÖ Found {len(messages)} messages")

        return True
    except Exception as e:
        print(f"  ‚ùå Thumbtack client error: {e}")
        return False


def test_gpt_client():
    """–¢–µ—Å—Ç GPT –∫–ª–∏–µ–Ω—Ç–∞"""
    print("\nü§ñ Testing GPT Client...")

    try:
        client = GPTClient()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è
        if not client.client:
            print("  ‚ùå GPT client not initialized")
            print("    Hint: Check your OpenAI API key")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("  üîç Testing OpenAI connection...")
        if hasattr(client, '_test_connection') and not client._test_connection():
            print("  ‚ùå Cannot connect to OpenAI API")
            print("    Hint: Check your API key and internet connection")
            return False

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–∏–¥
        test_lead = Lead(
            id="test_lead_001",
            customer_name="Jane Smith",
            customer_email="jane@example.com",
            service_category="Home Repairs & Installation",
            description="I need help installing a ceiling fan in my living room.",
            budget_range=(100, 200),
            preferred_date=datetime.now() + timedelta(days=7),
            location="New York, NY"
        )

        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–¥–∞
        print("  üîç Analyzing test lead...")
        analysis = client.analyze_lead(test_lead)

        print(f"    - Sentiment: {analysis.sentiment}")
        print(f"    - Intent: {analysis.intent}")
        print(f"    - Urgency: {analysis.urgency}")
        print(f"    - Suggested price: ${analysis.suggested_price}")
        print(
            f"    - Key requirements: {', '.join(analysis.key_requirements) if analysis.key_requirements else 'None'}")
        print(f"    - Confidence: {analysis.confidence_score:.2f}")

        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        print("  üìù Generating quote response...")
        quote_response = client.generate_quote_response(test_lead, analysis.suggested_price or 150)
        print(f"    - Response length: {len(quote_response)} characters")
        print(f"    - Sample: {quote_response[:100]}...")

        print("  ‚úÖ GPT client working correctly")
        return True

    except Exception as e:
        print(f"  ‚ùå GPT client error: {e}")
        print("    Hint: Check your OpenAI API key and internet connection")
        return False


def test_calendar_client():
    """–¢–µ—Å—Ç Calendar –∫–ª–∏–µ–Ω—Ç–∞"""
    print("\nüìÖ Testing Calendar Client...")

    try:
        client = CalendarClient()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ credentials.json
        if not os.path.exists(config.google_calendar_credentials_file):
            print(f"  ‚ö†Ô∏è Credentials file not found: {config.google_calendar_credentials_file}")
            print("    Please download credentials.json from Google Cloud Console")
            return False

        # –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        print("  üîê Authenticating with Google Calendar...")
        if not client.authenticate():
            print("  ‚ùå Authentication failed")
            print("    Hint: Make sure credentials.json is valid and Calendar API is enabled")
            return False

        print("  ‚úÖ Authentication successful")

        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        print("  üîç Checking availability...")
        tomorrow = datetime.now().replace(hour=14, minute=0, second=0, microsecond=0) + timedelta(days=1)
        end_time = tomorrow + timedelta(hours=2)

        is_available = client.check_availability(tomorrow, end_time)
        print(f"    - Tomorrow 2-4 PM available: {is_available}")

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        print("  üìã Getting available slots...")
        available_slots = client.get_available_slots(tomorrow, duration_hours=2.0)
        print(f"    - Found {len(available_slots)} available slots")

        for i, slot in enumerate(available_slots[:3]):
            print(f"      {i + 1}. {slot.strftime('%A, %B %d at %I:%M %p')}")

        print("  ‚úÖ Calendar client working correctly")
        return True

    except Exception as e:
        print(f"  ‚ùå Calendar client error: {e}")
        return False


def test_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
    print("\nüîó Testing Integration...")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
        thumbtack = ThumbtackClient()
        gpt = GPTClient()
        calendar = CalendarClient()

        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        if not thumbtack.authenticate():
            print("  ‚ùå Thumbtack authentication failed")
            return False

        if not calendar.authenticate():
            print("  ‚ö†Ô∏è Calendar authentication failed - skipping calendar tests")
            calendar = None

        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–¥
        leads = thumbtack.get_new_leads()
        if not leads:
            print("  ‚ö†Ô∏è No leads found for integration test")
            return True

        lead = leads[0]
        print(f"  üìã Processing lead: {lead.customer_name}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏–¥
        analysis = gpt.analyze_lead(lead)
        print(f"    - GPT analysis: {analysis.intent} (${analysis.suggested_price})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if calendar and lead.preferred_date:
            available_slots = calendar.get_available_slots(lead.preferred_date)
            print(f"    - Available slots: {len(available_slots)}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if analysis.suggested_price:
            quote = gpt.generate_quote_response(lead, analysis.suggested_price)
            print(f"    - Generated quote: {len(quote)} characters")

        print("  ‚úÖ Integration test completed successfully")
        return True

    except Exception as e:
        print(f"  ‚ùå Integration test error: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ Starting Thumbtack Bot Tests\n")

    tests = [
        ("Configuration", test_config),
        ("Thumbtack Client", test_thumbtack_client),
        ("GPT Client", test_gpt_client),
        ("Calendar Client", test_calendar_client),
        ("Integration", test_integration)
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        try:
            result = test_func()
            if result:
                passed += 1
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è Tests interrupted by user")
            break
        except Exception as e:
            print(f"  ‚ùå Unexpected error in {test_name}: {e}")

    print(f"\nüìä Test Results: {passed}/{total} tests passed")

    if passed == total:
        print("üéâ All tests passed! Your bot is ready to run.")
        print("\nNext steps:")
        print("  - Run: python main.py --once")
        print("  - Or: python main.py --daemon")
    else:
        print("‚ùå Some tests failed. Please fix the issues before running the bot.")
        print("\nCommon solutions:")
        print("  - Check your .env file configuration")
        print("  - Verify OpenAI API key is valid")
        print("  - Download credentials.json for Google Calendar API")
        print("  - Ensure internet connection is working")

    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)